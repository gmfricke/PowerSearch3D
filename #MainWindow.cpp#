
#include "Model.h"
#include "Visualizer.h"
#include "MainWindow.h"
#include <string>
#include <boost/lexical_cast.hpp>
#include "Histogram.h"

using namespace std;
using namespace boost;

//! [0]
MainWindow::MainWindow()
{
    setWindowIcon(QIcon("powersearch.icns"));

    vis = new Visualizer();

    xSlider = createSlider();
    ySlider = createSlider();
    zSlider = createSlider();

    connect(xSlider, SIGNAL(valueChanged(int)), vis, SLOT(setXRotation(int)));
    connect(vis, SIGNAL(xRotationChanged(int)), xSlider, SLOT(setValue(int)));
    connect(ySlider, SIGNAL(valueChanged(int)), vis, SLOT(setYRotation(int)));
    connect(vis, SIGNAL(yRotationChanged(int)), ySlider, SLOT(setValue(int)));
    connect(zSlider, SIGNAL(valueChanged(int)), vis, SLOT(setZRotation(int)));
    connect(vis, SIGNAL(zRotationChanged(int)), zSlider, SLOT(setValue(int)));
//! [0]

//! [1]


    QHBoxLayout* mainLayout = new QHBoxLayout;

    input_files_to_process_list = new QListWidget();
    input_files_to_process_list->setSortingEnabled(true);

    histogram = new Histogram(this);

    //histogram->setBins(bins);

    histogram->show();

    QGridLayout* toolLayout = new QGridLayout;
    mainLayout->addWidget(vis);

    mainLayout->addLayout(toolLayout);

    QLabel* total_contacts_label = new QLabel("Contacts With Replacement");
    total_contacts_value = new QCheckBox();

    QLabel* time_resolution_label = new QLabel("Time Resolution");
    time_resolution_value = new QLineEdit("0");

    QLabel* n_searchers_label = new QLabel("Number of Searchers");
    n_searchers_value = new QLineEdit("0");

    QLabel* n_clusters_label = new QLabel("Number of Target Clusters");
    n_clusters_value = new QLineEdit("Value");

    QLabel* n_targets_per_cluster_label = new QLabel("Number of Targets per Cluster");
    n_targets_per_cluster_value = new QLineEdit("Value");

    QLabel* cluster_radius_label = new QLabel("Cluster Radius");
    cluster_radius_value = new QLineEdit("Value");
    connect(cluster_radius_value, SIGNAL(textChanged(const QString &)), vis, SLOT(GUISetClusterRadius(const QString &)));

    QLabel* targets_detect_radius_label = new QLabel("Target Detect Radius");
    targets_detect_radius_value = new QLineEdit("0");
    connect(targets_detect_radius_value, SIGNAL(textChanged(const QString &)), vis, SLOT(GUISetTargetDetectRadius(const QString &)));

    QLabel* targets_display_radius_label = new QLabel("Target Display Size");

    targets_display_radius_value = new QLineEdit("0");
    connect(targets_display_radius_value, SIGNAL(textChanged(const QString &)), vis, SLOT(GUISetTargetDisplayRadius(const QString &)));

    QLabel* time_expended_label = new QLabel("Time Expended");
    time_expended_value = new QLabel("0");
    QLabel* time_expended_units_label = new QLabel("s");

    QLabel* dist_expended_label = new QLabel("Distance Expended");
    dist_expended_value = new QLabel("0");
    QLabel* dist_expended_units_label = new QLabel("\u00b5m");


    time_efficiency_std_value = new QLabel("0");
    dist_efficiency_std_value = new QLabel("0");


    QLabel* time_efficiency_label = new QLabel("Time Efficiency");
    time_efficiency_value = new QLabel("0");
    QLabel* time_efficiency_units_label = new QLabel("targets/s");


    QLabel* dist_efficiency_label = new QLabel("Distance Efficiency");
    dist_efficiency_value = new QLabel("0");
    QLabel* dist_efficiency_units_label = new QLabel(QString::fromUtf8("targets/\u00b5m"));

    QPushButton* place_searchers_button = new QPushButton("Place Searchers");
    connect(place_searchers_button, SIGNAL(clicked()), vis, SLOT(GUIPlaceSearchers()));

    toolLayout->addWidget(n_clusters_label, 1, 1);
    toolLayout->addWidget(n_clusters_value, 1, 2);

    toolLayout->addWidget(total_contacts_label, 1, 3);
    toolLayout->addWidget(total_contacts_value, 1, 4);

    toolLayout->addWidget(n_targets_per_cluster_label, 2, 1);
    toolLayout->addWidget(n_targets_per_cluster_value, 2, 2);

    toolLayout->addWidget(cluster_radius_label, 3, 1);
    toolLayout->addWidget(cluster_radius_value, 3, 2);

    toolLayout->addWidget(targets_display_radius_label, 4, 1);
    toolLayout->addWidget(targets_display_radius_value, 4, 2);

    toolLayout->addWidget(targets_detect_radius_label, 5, 1);
    toolLayout->addWidget(targets_detect_radius_value, 5, 2);

    toolLayout->addWidget(n_searchers_label, 6, 1);
    toolLayout->addWidget(n_searchers_value, 6, 2);

    toolLayout->addWidget(place_searchers_button, 6, 3);

    toolLayout->addWidget(time_resolution_label, 7, 1);
    toolLayout->addWidget(time_resolution_value, 7, 2);

    toolLayout->addWidget(xSlider, 8, 1);
    toolLayout->addWidget(ySlider, 8, 2);
    toolLayout->addWidget(zSlider, 8, 3);

    xSlider->setValue(15 * 16);
    ySlider->setValue(345 * 16);
    zSlider->setValue(0 * 16);

    QPushButton* zoomin_button = new QPushButton("Zoom In");
    QPushButton* zoomout_button = new QPushButton("Zoom Out");
    QPushButton* openfile_button = new QPushButton("Open File");

    QPushButton* panup_button = new QPushButton("Pan Up");
    QPushButton* pandown_button = new QPushButton("Pan Down");
    QPushButton* panleft_button = new QPushButton("Pan Left");
    QPushButton* panright_button = new QPushButton("Pan Right");


    connect(zoomin_button, SIGNAL(clicked()), vis, SLOT(ZoomIn()));
    connect(zoomout_button, SIGNAL(clicked()), vis, SLOT(ZoomOut()));
    connect(openfile_button, SIGNAL(clicked()), vis, SLOT(OpenFile()));

    connect(panup_button, SIGNAL(clicked()), vis, SLOT(PanUp()));
    connect(pandown_button, SIGNAL(clicked()), vis, SLOT(PanDown()));
    connect(panleft_button, SIGNAL(clicked()), vis, SLOT(PanLeft()));
    connect(panright_button, SIGNAL(clicked()), vis, SLOT(PanRight()));

    toolLayout->addWidget(zoomin_button, 9, 1);
    toolLayout->addWidget(zoomout_button, 9, 2);
    toolLayout->addWidget(openfile_button, 9, 3);

    toolLayout->addWidget(panup_button, 10, 2);
    toolLayout->addWidget(panleft_button, 11, 1);
    toolLayout->addWidget(panright_button, 11, 3);
    toolLayout->addWidget(pandown_button, 12, 2);

    QPushButton* generate_button = new QPushButton("Analyse");
    QPushButton* save_button = new QPushButton("Save");
    QComboBox* search_type_combobox = new QComboBox();
    search_type_combobox->addItem("Observed Motion");
    search_type_combobox->addItem("Brownian Motion");
    search_type_combobox->addItem("LogNormal Walk");
    search_type_combobox->addItem("Levy Walk");

    connect(search_type_combobox, SIGNAL(activated(int)), vis, SLOT(GUISetSearchType(int)));

    connect(save_button, SIGNAL(clicked()), vis, SLOT(stop()));
    connect(generate_button, SIGNAL(clicked()), vis, SLOT(GUIgenerate()));

    toolLayout->addWidget(generate_button, 13, 1);
    toolLayout->addWidget(search_type_combobox, 13, 2);
    toolLayout->addWidget(save_button, 13, 3);

    toolLayout->addWidget(time_expended_label, 14, 1);
    toolLayout->addWidget(time_expended_value, 14, 2);
    toolLayout->addWidget(time_expended_units_label, 14, 3);

    toolLayout->addWidget(dist_expended_label, 15, 1);
    toolLayout->addWidget(dist_expended_value, 15, 2);
    toolLayout->addWidget(dist_expended_units_label, 15, 3);

    toolLayout->addWidget(time_efficiency_label, 16, 1);
    toolLayout->addWidget(time_efficiency_value, 16, 2);
    toolLayout->addWidget(time_efficiency_std_value, 16, 3);
    toolLayout->addWidget(time_efficiency_units_label, 16, 4);

    toolLayout->addWidget(dist_efficiency_label, 17, 1);
    toolLayout->addWidget(dist_efficiency_value, 17, 2);
    toolLayout->addWidget(dist_efficiency_std_value, 17, 3);
    toolLayout->addWidget(dist_efficiency_units_label, 17, 4);

    bar = new QProgressBar(0);
    bar->setRange(0, 100);
    bar->setValue(0);
    bar->show();

    histogram->toggled();
    toolLayout->addWidget(histogram, 18, 1, 6, 6);

    toolLayout->addWidget(bar, 24, 1);


    //
    // Begin Time boxplot
    //

    timeCustomPlot= new QCustomPlot();


    // create empty statistical box plottables:

    // One extra at each side for padding on axis rescale
    for (int i = 0; i < 17; i++)
        time_eff_samples.push_back(new QCPStatisticalBox(timeCustomPlot->xAxis, timeCustomPlot->yAxis));

    QBrush observed_boxBrush(QColor(60, 60, 255, 100));
    observed_boxBrush.setStyle(Qt::Dense6Pattern); // make it look oldschool

    QBrush brownian_boxBrush(QColor(60, 255, 60, 100));
    brownian_boxBrush.setStyle(Qt::Dense6Pattern); // make it look oldschool

    QBrush lognormal_boxBrush(QColor(255, 60, 60, 100));
    lognormal_boxBrush.setStyle(Qt::Dense6Pattern); // make it look oldschool


    timeCustomPlot->legend->setVisible(true);
    QFont legendFont = font();  // start out with MainWindow's font..
    //legendFont.setPointSize(9); // and make a bit smaller for legend
    timeCustomPlot->legend->setFont(legendFont);

       for (int i = 1; i < 6; i++)
            time_eff_samples[i]->setBrush(observed_boxBrush);


       for (int i = 6; i < 11; i++)
            time_eff_samples[i]->setBrush(brownian_boxBrush);


       for (int i = 11; i < 16; i++)
            time_eff_samples[i]->setBrush(lognormal_boxBrush);

       QVector<double> x_axis_tick_vector;
       QVector<QString> x_axis_tick_vector_label;



    for (int i = 0; i < time_eff_samples.size(); i++)
    {
        timeCustomPlot->addPlottable(time_eff_samples[i]);
        x_axis_tick_vector << i;

// Have to initialize the time_eff_samples here (not sure why)
        time_eff_samples[i]->setKey(i);
        time_eff_samples[i]->setMedian(0.0);
        time_eff_samples[i]->setLowerQuartile(0.0);
        time_eff_samples[i]->setUpperQuartile(0.0);
        time_eff_samples[i]->setMinimum(0.0);
        time_eff_samples[i]->setMaximum(0.0);
    }

    x_axis_tick_vector_label << "" << "10" << "20" << "30" << "40" << "50" << "10" << "20" << "30" << "40" << "50" << "10" << "20" << "30" << "40" << "50";


    // prepare manual x axis labels:
    timeCustomPlot->xAxis->setSubTickCount(0);
    timeCustomPlot->xAxis->setTickLength(0, 4);
    timeCustomPlot->xAxis->setTickLabelRotation(0);
    timeCustomPlot->xAxis->setAutoTicks(false);
    timeCustomPlot->xAxis->setAutoTickLabels(false);
    timeCustomPlot->xAxis->setTickVector(x_axis_tick_vector);
    timeCustomPlot->xAxis->setTickVectorLabels(x_axis_tick_vector_label);

    // prepare axes:
    timeCustomPlot->yAxis->setLabel(QString::fromUtf8("Time Efficiency (Targets/s)"));
    timeCustomPlot->rescaleAxes();
    timeCustomPlot->xAxis->scaleRange(1.7, timeCustomPlot->xAxis->range().center());
    timeCustomPlot->yAxis->setRange(0, 7.0);
    timeCustomPlot->setInteractions(QCP::iRangeDrag | QCP::iRangeZoom);
    timeCustomPlot->xAxis->setLabel(QString::fromUtf8("Target Cluster Radius (\u00b5m)"));




    //
    // End boxplot
    //

    timeCustomPlot->setMinimumWidth(600);
    timeCustomPlot->setMinimumHeight(600);

    //
    // Begin Distance Effciency boxplot
    //

    distCustomPlot= new QCustomPlot();

    // create empty statistical box plottables:

    for (int i = 0; i < 17; i++)
        dist_eff_samples.push_back(new QCPStatisticalBox(distCustomPlot->xAxis, distCustomPlot->yAxis));

       for (int i = 1; i < 6; i++)
            dist_eff_samples[i]->setBrush(observed_boxBrush);


       for (int i = 6; i < 11; i++)
            dist_eff_samples[i]->setBrush(brownian_boxBrush);


       for (int i = 11; i < 16; i++)
            dist_eff_samples[i]->setBrush(lognormal_boxBrush);

    for (int i = 0; i < dist_eff_samples.size(); i++)
    {
        distCustomPlot->addPlottable(dist_eff_samples[i]);
        x_axis_tick_vector << i;


// Have to initialize the dist_eff_samples here (not sure why)
        dist_eff_samples[i]->setKey(i);
        dist_eff_samples[i]->setMedian(0.0);
        dist_eff_samples[i]->setLowerQuartile(0.0);
        dist_eff_samples[i]->setUpperQuartile(0.0);
        dist_eff_samples[i]->setMinimum(0.0);
        dist_eff_samples[i]->setMaximum(0.0);
    }



    // prepare manual x axis labels:
    distCustomPlot->xAxis->setSubTickCount(0);
    distCustomPlot->xAxis->setTickLength(0, 4);
    distCustomPlot->xAxis->setTickLabelRotation(0);
    distCustomPlot->xAxis->setAutoTicks(false);
    distCustomPlot->xAxis->setAutoTickLabels(false);
    distCustomPlot->xAxis->setTickVector(x_axis_tick_vector);
    distCustomPlot->xAxis->setTickVectorLabels(x_axis_tick_vector_label);

    // prepare axes:
    distCustomPlot->yAxis->setLabel(QString::fromUtf8("Distance Efficiency (Targets/\u00b5m)"));
    distCustomPlot->rescaleAxes();
    distCustomPlot->xAxis->scaleRange(1.7, distCustomPlot->xAxis->range().center());
    distCustomPlot->yAxis->setRange(0, 7.0);
    distCustomPlot->setInteractions(QCP::iRangeDrag | QCP::iRangeZoom);
    distCustomPlot->xAxis->setLabel(QString::fromUtf8("Target Cluster Radius (\u00b5m)"));




    //
    // End boxplot
    //


    // setup the efficiency plot legend
    timeCustomPlot->legend->removeItem(0);

    time_eff_samples[1]->setName("Observed");

    for (int i = 0; i < 4; i++ )
    timeCustomPlot->legend->removeItem(1);

    time_eff_samples[6]->setName("Brownian");

    for (int i = 0; i < 4; i++ )
    timeCustomPlot->legend->removeItem(2);

    time_eff_samples[11]->setName("Lognormal");

    for (int i = 0; i < 8; i++ )
    timeCustomPlot->legend->removeItem(3);

    timeCustomPlot->replot();

    distCustomPlot->setMinimumWidth(600);
    distCustomPlot->setMinimumHeight(600);

    timeCustomPlot->axisRect()->insetLayout()->setInsetAlignment(0, Qt::AlignRight|Qt::AlignBottom);

    QVBoxLayout* secondaryLayout = new QVBoxLayout;

    secondaryLayout->addWidget(input_files_to_process_list);
    secondaryLayout->addWidget(distCustomPlot);
    secondaryLayout->addWidget(timeCustomPlot);

    mainLayout->addLayout(secondaryLayout);

    setLayout(mainLayout);

}
//! [1]

//! [2]
QSlider *MainWindow::createSlider()
{
    QSlider *slider = new QSlider(Qt::Vertical);
    slider->setRange(0, 360 * 16);
    slider->setSingleStep(16);
    slider->setPageStep(15 * 16);
    slider->setTickInterval(15 * 16);
    slider->setTickPosition(QSlider::TicksRight);
    return slider;
}
//! [2]

void MainWindow::keyPressEvent(QKeyEvent *e)
{
    if (e->key() == Qt::Key_Escape)
        close();
    else
        QWidget::keyPressEvent(e);
}

Visualizer* MainWindow::getVisualizer()
{
    return vis;
}

void MainWindow::setVisualizer( Visualizer* v )
{
    vis = v;
}

void MainWindow::setTimeExpended( float v )
{
    //cout << "MainWindow::setTimeExpended() called" << endl;
    QString text = QString::number(v, 'g', 3);
    time_expended_value->setText(text);
}

void MainWindow::setDistExpended( float v )
{
    //cout << "MainWindow::setDistExpended() called" << endl;
    QString text = QString::number(v, 'g', 3);
    dist_expended_value->setText(text);
}

void MainWindow::setTimeEfficiencyStd( float v )
{
    QString text = QString::number(v, 'g', 3);
    time_efficiency_std_value->setText(text);
}

void MainWindow::setDistEfficiencyStd( float v )
{
    QString text = QString::number(v, 'g', 3);
    dist_efficiency_std_value->setText(text);
}

void MainWindow::setTimeEfficiencyMean( float v )
{
    QString text = QString::number(v, 'g', 3);
    time_efficiency_value->setText(text);
}

void MainWindow::setClusterRadius( float v )
{
    QString text = QString::number(v, 'g', 3);
    cluster_radius_value->setText(text);
}

void MainWindow::setDistEfficiencyMean( float v )
{
    QString text = QString::number(v, 'g', 3);
    dist_efficiency_value->setText(text);
}

void MainWindow::setDisplayRadius(float v)
{
    QString targets_display_radius_str = QString::number(v, 'g', 5);
    targets_display_radius_value->setText( targets_display_radius_str );
}

void MainWindow::setDetectionRadius(float v)
{
    QString targets_detection_radius_str = QString::number(v, 'g', 5);
    targets_detect_radius_value->setText( targets_detection_radius_str );
}

void MainWindow::setNumClusters(int v)
{
    QString str = QString::number(v, 'g', 3);
    n_clusters_value->setText( str );
}

void MainWindow::setNumTargetsPerCluster(int v)
{
    QString str = QString::number(v, 'g', 3);
    n_targets_per_cluster_value->setText( str );
}

void MainWindow::setNumSearchers(int v)
{
    QString str = QString::number(v, 'g', 3);
    n_searchers_value->setText( str );
}

void MainWindow::setTimeResolution(float v)
{
    QString str = QString::number(v, 'g', 3);
    time_resolution_value->setText( str );
}

MainWindow::~MainWindow()
{
    //cout << "MainWindow: cleaning up" << endl;
}

void MainWindow::setProgressBarPercentage(int percentage)
{
    ////cout << "MainWindow: Progress Bar Updated" << endl;
    bar->setValue(percentage);
}

void MainWindow::setHistogramMaxValue(float v)
{
    histogram->setMaxValue(v);
}

void MainWindow::setHistogramValues(MyArray values)
{
    histogram->setBins(values);

}

void MainWindow::addInputFileToProcess(QString v)
{
    input_files_to_process_list->addItem(new QListWidgetItem(v));
    input_files_to_process_list->setMinimumWidth(input_files_to_process_list->sizeHintForColumn(0));
}

void MainWindow::setInputFileProcessed(int v)
{
    input_files_to_process_list->item(v)->setForeground(Qt::gray);
}

void MainWindow::setInputFileProcessing(int v)
{
    input_files_to_process_list->item(v)->setForeground(Qt::blue);
}

void MainWindow::clearInputFilesToProcess()
{
    input_files_to_process_list->clear();
}


// Format: first value is the sample index (1-5), the second value is the median, (3) lower quartile, (4) upper quartile, (5) min value, (6) max value, remaining values are the outliers.
void MainWindow::setTimeEfficiencySample(FloatVector values)
{
    //cout << "MainWindow::setSample() signal recieved" << endl;

    if (values.size() < 6)
        cout << "MainWindow: too few values in sample: " << values.size() << endl;

    //cout << "MainWindow::plotting at " << values[0] << endl;

int position = values[0]+1;

   time_eff_samples[position]->setMedian(values[1]);
   time_eff_samples[position]->setLowerQuartile(values[2]);
   time_eff_samples[position]->setUpperQuartile(values[3]);
   time_eff_samples[position]->setMinimum(values[4]);
   time_eff_samples[position]->setMaximum(values[5]);

    QVector<double> outliers;

    for (int i = 6; i < values.size(); i++)
        outliers << values[i];

   time_eff_samples[position]->setOutliers(outliers);

    float max_value = -10000;
    float min_value = 10000;
    for (int i = 2; i < values.size(); i++)
    {
        if (values[i] > max_value) max_value = values[i];
        if (values[i] < min_value) min_value = values[i];

    }

    timeCustomPlot->yAxis->setRange(min_value - (abs(min_value-max_value))*0.1, max_value + (abs(min_value-max_value)*0.1));

    timeCustomPlot->rescaleAxes();

    timeCustomPlot->replot();
}

// Format: first value is the sample index (1-5), the second value is the median, (3) lower quartile, (4) upper quartile, (5) min value, (6) max value, remaining values are the outliers.
void MainWindow::setDistanceEfficiencySample(FloatVector values)
{
    //cout << "MainWindow::setSample() signal recieved" << endl;

    if (values.size() < 6)
        cout << "MainWindow: too few values in sample: " << values.size() << endl;

    //cout << "MainWindow::plotting at " << values[0] << endl;

 int position = values[0]+1;

  dist_eff_samples[position]->setMedian(values[1]);
  dist_eff_samples[position]->setLowerQuartile(values[2]);
  dist_eff_samples[position]->setUpperQuartile(values[3]);
  dist_eff_samples[position]->setMinimum(values[4]);
  dist_eff_samples[position]->setMaximum(values[5]);

    QVector<double> outliers;

    for (int i = 6; i < values.size(); i++)
        outliers << values[i];

  dist_eff_samples[position]->setOutliers(outliers);

    float max_value = -10000;
    float min_value = 10000;
    for (int i = 2; i < values.size(); i++)
    {
        if (values[i] > max_value) max_value = values[i];
        if (values[i] < min_value) min_value = values[i];

    }

    distCustomPlot->yAxis->setRange(min_value - (abs(min_value-max_value))*0.1, max_value + (abs(min_value-max_value)*0.1));

    distCustomPlot->rescaleAxes();

    distCustomPlot->replot();

    //distCustomPlot->rescaleValueAxis();


}
